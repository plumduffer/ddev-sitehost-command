#!/bin/bash

# Warn if .env.sitehost doesn't exist
if [ ! -f "${DDEV_APPROOT}/.env.sitehost" ]; then
    echo -e "\n\033[38;5;208m.env.sitehost needs to exist at the app root with the format:\033[0m\n\n\033[0;36mSITEHOST_SSH_IP=\nSITEHOST_SSH_USER=\nSITEHOST_SSH_PASSWORD=\nSITEHOST_DB_NAME=\nSITEHOST_DB_USER=\nSITEHOST_DB_PASSWORD=\033[0m\n"
fi

# Offer to create .env.sitehost if it doesn't exist
while [ ! -f "${DDEV_APPROOT}/.env.sitehost" ]; do
    read -r -p "Would you like to create a .env.sitehost file now? [Y/n] " response
    case $response in
        [yY][eE][sS]|[yY]|"")
            echo -e "SITEHOST_SSH_IP=\nSITEHOST_SSH_USER=\nSITEHOST_SSH_PASSWORD=\nSITEHOST_DB_NAME=\nSITEHOST_DB_USER=\nSITEHOST_DB_PASSWORD=" > "${DDEV_APPROOT}/.env.sitehost"
            echo -e "\n\033[0;32mCreated .env.sitehost file\033[0m ✅\n\033[38;5;208mPlease fill out the required variables and run this command again.\033[0m\n"
            exit
            ;;
        [nN][oO]|[nN])
            echo -e "\n\033[38;5;208mExiting without creating .env.sitehost file.\033[0m\n"
            exit 1
            ;;
        *)
            echo -e "\n⚠️  \033[38;5;208mPlease choose yes or no\033[0m ⚠️\n"
            ;;
    esac
done

# Load .env.sitehost variables
source "${DDEV_APPROOT}/.env.sitehost"

if [ $# -eq 0 ] || [ $1 == "help" ]; then
    echo -e "\nHelps you interact with Sitehost from DDEV.\nRepo: https://github.com/plumduffer/DDEV-Sitehost-Command\n\nUsage:\n   ddev sitehost [command]\n\nAvailable Commands:\n   assets        Syncs git ignored files from the public directory.\n   db            Clones the database and imports it into DDEV.\n   ssh           Starts an ssh session.\n"
    exit
fi

function check_env_vars {
    local missing_vars=()
    for var in "$@"; do
        if [ -z "${!var}" ]; then
            missing_vars+=("$var")
        fi
    done

    if [ ${#missing_vars[@]} -ne 0 ]; then
        echo -e "\n\033[38;5;208mThe following environment variables are required for this command but are not set:\033[0m\n"
        for var in "${missing_vars[@]}"; do
            echo -e "\033[0;36m$var\033[0m"
        done
        echo ""
        exit 1
    fi
}

if [ $1 == "db" ]; then
    check_env_vars "SITEHOST_SSH_IP" "SITEHOST_SSH_USER" "SITEHOST_SSH_PASSWORD" "SITEHOST_DB_NAME" "SITEHOST_DB_USER" "SITEHOST_DB_PASSWORD"

    FILENAME_TIME=$(date +%s)
    FILENAME_DB=${DDEV_APPROOT}/${FILENAME_TIME}_db.sql

    echo -e "\033[38;5;208mDownloading database from production...\033[0m"

    echo 'set timeout -1
    log_user 0
    spawn bash -c "ssh '${SITEHOST_SSH_USER}'@'${SITEHOST_SSH_IP}' \"mysqldump -u '${SITEHOST_DB_USER}' -p '${SITEHOST_DB_NAME}' -p'${SITEHOST_DB_PASSWORD}' --column-statistics=0 --no-tablespaces\" > '$FILENAME_DB'"
    expect {
        "'${SITEHOST_SSH_USER}'@'${SITEHOST_SSH_IP}\''s password:" {
            send "'${SITEHOST_SSH_PASSWORD}'\r"
            expect eof
        }
    }
    ' | expect

    echo -e "\033[38;5;208mImporting database into DDEV...\033[0m"

    ddev import-db --target-db=db --src=${FILENAME_DB}

    rm ${FILENAME_DB}
    exit
fi

if [ $1 == "ssh" ]; then
    check_env_vars "SITEHOST_SSH_IP" "SITEHOST_SSH_USER"

    echo -e "\n\033[38;5;208mPassword will need to be provided if you haven't enabled your SSH key for this site on Sitehost.\nThis is because you can't take control of a shell spawned by the expect command line tool.\nOnly the automatic commands like 'db' and 'assets' can take advantage of putting the password in for you.\033[0m\n"

    ssh ${SITEHOST_SSH_USER}@${SITEHOST_SSH_IP}
    exit
fi

if [ $1 == "assets" ]; then
    check_env_vars "SITEHOST_SSH_IP" "SITEHOST_SSH_USER" "SITEHOST_SSH_PASSWORD"

    FILENAME_TIME=$(date +%s)
    FILENAME_ASSETS_LIST=${DDEV_APPROOT}/${FILENAME_TIME}_assets
    PUBLIC_DIR=/container/application/${DDEV_DOCROOT}

    echo 'set timeout -1
    log_user 0
    spawn bash -c "ssh '${SITEHOST_SSH_USER}'@'${SITEHOST_SSH_IP}' \"cd '${PUBLIC_DIR}' && git ls-files -o -i --exclude-standard --directory '\'':!:cpresources/'\'' . '\'':!:_resources'\''\" > '${FILENAME_ASSETS_LIST}'"
    expect {
        "'${SITEHOST_SSH_USER}'@'${SITEHOST_SSH_IP}\''s password:" {
            send "'${SITEHOST_SSH_PASSWORD}'\r"
            expect eof
        }
    }' | expect

    while read p; do
        TRIMMED=$(echo "$p" | sed 's:/*$::')
        echo 'set timeout -1
        log_user 0
        spawn rsync -auv '${SITEHOST_SSH_USER}'@'${SITEHOST_SSH_IP}':'${PUBLIC_DIR}'/'${TRIMMED}' '${DDEV_APPROOT}/${DDEV_DOCROOT}'
        log_user 1
        expect {
            "'${SITEHOST_SSH_USER}'@'${SITEHOST_SSH_IP}\''s password:" {
                send "'${SITEHOST_SSH_PASSWORD}'\r"
                expect eof
            }
        }' | expect
    done <${FILENAME_ASSETS_LIST}

    rm $FILENAME_ASSETS_LIST
    exit
fi
